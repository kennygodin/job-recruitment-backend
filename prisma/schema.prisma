generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EMPLOYER
  APPLICANT
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
}

enum JobStatus {
  OPEN
  CLOSED
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  REJECTED
  ACCEPTED
}

model User {
  id        Int       @default(autoincrement()) @id
  userId    String    @unique @default(uuid()) 
  name      String
  email     String    @unique 
  password  String
  role      Role
  avatar String?
  isVerified      Boolean   @default(false)
  status          String    @default("active")
  companyName     String? 
  companyWebsite  String? 
  companyAddress  String? 
  resume          String? 
  portfolio       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  refreshTokens RefreshToken[]
  resetTokens ResetToken[]
  jobs Job[]
  applications Application[]
}

model RefreshToken {
  id      Int     @default(autoincrement()) @id
  token   String   @unique
  userId  String
  user    User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  createdAt  DateTime @default(now())
  expiresAt  DateTime
}

model ResetToken {
  id      Int     @default(autoincrement()) @id
  token   String   @unique
  userId  String
  user    User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  createdAt  DateTime @default(now())
  expiresAt  DateTime
}

model Job {
  id      Int     @default(autoincrement()) @id
  jobId    String    @unique @default(uuid())
  title   String
  description   String
  company       String
  location      String
  type          JobType
  status        JobStatus
  industry      String?
  priceRange    String?
  negotiable    Boolean?
  jobSummary    String?
  jobRequirements  String?
  postedById  String
  postedBy      User      @relation(fields: [postedById], references: [userId], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  applicants Application[]
}

model Application {
  id      Int     @default(autoincrement()) @id
  applicationId    String    @unique @default(uuid())
  userId  String
  user    User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  jobId   String
  job     Job      @relation(fields: [jobId], references: [jobId], onDelete: Cascade)
  resume        String?
  coverLetter   String?
  status        ApplicationStatus
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}