generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  userId            String @unique @default(uuid())
  name              String
  email             String         @unique
  password          String
  role              Role
  image             String?
  isVerified        Boolean        @default(false)
  status            String         @default("active")
  resume            String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  applications      Application[]
  skill             Skill[]
  company           Company?
}

model Company {
  id                Int    @id @default(autoincrement())
  companyId        String @unique @default(uuid())
  companyName       String
  companyWebsite    String
  companyAddress    String
  logo              String?
  industry          String
  numberOfEmployees    String?
  whereDidYouHear   String?
  notificationEmail String?
  cacDocument       String
  jobs              Job[]
  socials           Social[]
  country           String
  phone             String
  userId            String @unique
  companyStatus    CompanyStatus        
  user              User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Job {
  id                 Int           @id @default(autoincrement())
  jobId              String            @unique @default(uuid())
  jobTitle           String
  jobDescription     String
  jobCompanyId       String
  jobLocation        String
  jobType            JobType
  jobStatus          JobStatus
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  jobRequirements    String
  jobSummary         String
  jobExperience      String
  jobSalary          String
  applicants         Application[]
   keywords          String[] 
  company            Company          @relation(fields: [jobCompanyId], references: [companyId], onDelete: Cascade)
}

// TODO: ADD VACANCY

model Application {
  id                Int               @id @default(autoincrement())
  applicationId     String            @unique @default(uuid())
  name              String
  email             String            @unique
  location          String
  phone             String         @unique
  jobId             String
  resume            String
  coverLetter       String?
  status            ApplicationStatus
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            String
  yearsOfExperience String
  user              User              @relation(fields: [userId], references: [userId], onDelete: Cascade)
  job               Job               @relation(fields: [jobId], references: [jobId], onDelete: Cascade)
}

model Social {
  id           Int      @id @default(autoincrement())
  socialId     String            @unique @default(uuid())
  socialName   String
  companyId    String
  createdAt    DateTime @default(now())
  company      Company     @relation(fields: [socialId], references: [companyId], onDelete: Cascade)
}

model Skill {
  id        Int      @id @default(autoincrement())
  skillId     String            @unique @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [skillId], references: [userId], onDelete: Cascade)
}

model VerificationToken {
  id              String @id @default(cuid())
  email             String         @unique
  token           String           @unique
  expires         DateTime
}

model RefreshToken {
  id              String @id @default(cuid())
  email             String         @unique
  token           String           @unique
  expires         DateTime
}

model ResetToken {
  id              String @id @default(cuid())
  email             String         @unique
  token           String           @unique
  expires         DateTime
}

enum Role {
  ADMIN
  USER
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

enum JobStatus {
  OPEN
  CLOSED
}

enum CompanyStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
